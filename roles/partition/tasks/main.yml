---
- name: "Create partitions"
  parted:
    name: "{{ item.name }}"
    device: "{{ partition_device }}"
    number: "{{ item.number }}"
    flags: "{{ item.flags }}"
    label: "{{ item.label }}"
    state: "present"
    part_start: "{{ item.part_start }}"
    part_end: "{{ item.part_end }}"
  with_items: "{{ partition_partitions }}"

- name: "Display current partitions"
  command: "lsblk -f"
  changed_when: no
  register: encrypted

- name: "Create LUKS partition"
  block:
    - tempfile: suffix="crypt" state="directory"
      register: tempdir_encrypt
    - copy: content="{{ partition_password }}" dest="{{ tempdir_encrypt.path }}/keyfile"
      no_log: yes
    - command: "cryptsetup luksFormat --type luks2 --key-file {{ tempdir_encrypt.path }}/keyfile {{ partition_os }}"
      when: encrypted is defined and encrypted.stdout.find("crypto_LUKS") == -1
    - command: "cryptsetup open --key-file {{ tempdir_encrypt.path }}/keyfile {{ partition_os }} {{ partition_physical_group }}"
  always:
    - file: path="{{ tempdir_encrypt.path }}" state="absent"
  when: encrypted is defined and encrypted.stdout.find(partition_physical_group) == -1

- name: "Create the volume group (and physical volume) inside the LUKS partition"
  lvg:
    vg: "{{ partition_volume_group }}"
    pvs: "/dev/mapper/{{ partition_physical_group }}"

- name: "Create the logical volumes"
  lvol:
    vg: "{{ partition_volume_group }}"
    lv: "{{ item.partition | split('/') | last }}"
    size: "{{ item.size }}"
    shrink: no
  with_items: "{{ partition_volumes }}"

- name: "Format partitions"
  filesystem:
    fstype: "{{ item.fstype }}"
    dev: "{{ item.partition }}"
    opts: "{{ item.opts | default('') }}"
  with_items: "{{ partition_volumes + partition_boot }}"

- name: "Mount partitions"
  mount:
    src: "{{ item.partition }}"
    path: "{{ item.path }}"
    fstype: "{{ item.fstype }}"
    state: "mounted"
  with_items: "{{ partition_volumes + partition_boot }}"

- name: "Check if Arch Linux is already installed"
  command: "arch-chroot {{ partition_main_mount_point }}"
  failed_when: no
  changed_when: no
  register: arch_chroot_mount

- name: "Install Arch Linux"
  command: "pacstrap {{ partition_main_mount_point }} base base-devel ansible git make vim"
  when: arch_chroot_mount is defined and arch_chroot_mount.stderr.find("ERROR") >= 0

- name: "Download ansible-laptop repository"
  git:
    repo: "{{ ansible_laptop_repo }}"
    dest: "{{ ansible_laptop_directory }}"
    clone: yes
    update: yes

- name: "Generate fstab"
  command: "genfstab -U {{ partition_main_mount_point }}"
  changed_when: no
  register: genfstab

- name: "Save fstab"
  blockinfile:
    dest: "{{ partition_main_mount_point }}/etc/fstab"
    block: "{{ genfstab.stdout }}"
    state: "present"
    create: yes
  when: genfstab is defined
