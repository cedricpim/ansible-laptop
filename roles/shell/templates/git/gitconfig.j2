{{ ansible_managed | comment }}

[alias]
  # View abbreviated SHA, description, and history graph of the latest 20 commits
  lg = log --pretty=oneline -n 20 --graph --abbrev-commit
  # View abbreviated SHA, description without graph of the latest 10 commits
  l = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' -n 10 --abbrev-commit
  # View the current working tree status using the short format
  s = status -s
  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
  # Pull in remote changes for the current repository and all its submodules
  p = !"git pull; git submodule foreach git pull origin master"
  # Return hash of the most recent commit (according to number provided)
  cp = !"f() { git log --oneline | cut -d ' ' -f1 | head -n $1 | tail -n 1 | tr -d '\n'; }; f"
  # Clone a repository including all submodules
  c = clone --recursive
  # Switch to a branch, creating it if necessary
  go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v
  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD
  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"
  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"
  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"
  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
  # Remove branches that have already been merged with master
  # a.k.a. ‘delete merged’
  mop = !git branch --merged master | grep -v master | xargs -n 1 git branch -D
  # List contributors with number of commits
  contributors = shortlog --summary --numbered
  # Merge GitHub pull request on top of the `master` branch
  mpr = "!f() { \
    if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
      git fetch origin refs/pull/$1/head:pr/$1 && \
      git rebase master pr/$1 && \
      git checkout master && \
      git merge pr/$1 && \
      git branch -D pr/$1 && \
      git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
    fi \
  }; f"
  # Other aliases
  co = checkout
  st = status
  hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
  cm = commit -S
  rso = remote show origin
  g = grep --break --heading --line-number
  up = "!git remote update -p; git merge --ff-only @{u}"
  unadd = reset HEAD
  # Log with Graph
  graph = log --graph --pretty=format:'%Cred%h%Creset %an: %s - %Creset %C(yellow)%d%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
  # Fixup commit instead of full commit
  fixup = commit --fixup
  # Squash commit instead of full commit
  squash = commit --squash
  # Push with lease (better than simply force push)
  pf = push --force-with-lease
  # Just push
  p = push
  # Run bundled rubocop on the files that have changes from current branch to master
  cop = !git diff --name-only $(git merge-base master HEAD) --diff-filter=AM -- '*.rb' '*.rake' | grep -v schema.rb$ | xargs bundle exec rubocop
  diff = diff --ignore-space-change -w
  show = show -w
  aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /' | sort
  stash-all = stash save --include-untracked
  overview = log --all --since='2 weeks' --oneline --no-merges
  # Wipe all local branches apart from master
  wipe = !git branch | grep -v master | xargs -n 1 git branch -D
  # Ammend using previous message
  ca = commit --amend --no-edit
  # Check commits per author
  authors = "!r() { git shortlog -sn --since=\"$1 weeks\"; }; r"

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

[core]
  autocrlf = input
  excludesfile = ~/.gitignore
  editor = vim
  pager = diff-so-fancy | less --tabs=4 -RFX

[color]
  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
  ui = auto

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold # line info
  old = red # deletions
  new = green # additions

[color "status"]
  added = green
  changed = yellow
  untracked = cyan

[diff]
  # Detect copies as well as renames
  renames = copies
  compactionHeuristic = true

[grep]
  extendRegexp = true
  lineNumber = true

[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = true

[push]
  default = simple
  recurseSubmodules = check

[fetch]
  prune = true

[branch]
  autosetuprebase = always

[rebase]
  autosquash = true

[pull]
  rebase = preserve

[color "diff-highlight"]
  oldNormal = red bold
  oldHighlight = red bold 52
  newNormal = green bold
  newHighlight = green bold 22

[user]
  name = {{ git_full_name }}
  email = {{ git_email }}
  signingkey = {{ git_signingkey }}
