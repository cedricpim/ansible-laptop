---
- name: "Install cryptsetup"
  pacman:
    name: "cryptsetup"
    state: "present"
  become: yes

- name: "Retrieve list of packages installed"
  command: "yay -Qet"
  changed_when: false
  register: packages_list

- name: "Create temporary backup directory"
  tempfile:
    suffix: "backup"
    state: "directory"
  register: tempdir
  notify: "Cleanup backup tempdir"

- name: "Create empty file with size of container"
  command: "fallocate -l {{ backup_size }} {{ tempdir.path }}/{{ backup_name }}.img"
  when: tempdir is defined

- name: "Create backup"
  block:
    - lineinfile: dest="{{ tempdir.path }}/keyfile" line="{{ backup_password }}" state="present" create=yes
      no_log: yes
    - command: "cryptsetup luksFormat --type luks2 --key-file {{ tempdir.path }}/keyfile {{ tempdir.path }}/{{ backup_name }}.img"
    - command: "cryptsetup luksOpen --key-file {{ tempdir.path }}/keyfile {{ tempdir.path }}/{{ backup_name }}.img {{ backup_name }}"
    - filesystem: fstype="ext4" dev="/dev/mapper/{{ backup_name }}"
    - mount: path="{{ backup_mount_dir }}" src="/dev/mapper/{{ backup_name }}" fstype="ext4" state="mounted"
    - copy: content="{{ packages_list.stdout }}" dest="{{ backup_mount_dir }}/packages"
    - synchronize: src="{{ item }}" dest="{{ backup_mount_dir }}" archive=yes recursive=yes delete=yes rsync_opts="{{ backup_exclude_options }}"
      delegate_to: "{{ inventory_hostname }}"
      with_items: "{{ backup_dirs }}"
  always:
    - file: path="{{ tempdir.path }}/keyfile" state="absent"
    - mount: path="{{ backup_mount_dir }}" state="absent"
    - command: "cryptsetup luksClose {{ backup_name }}"
  become: yes
  when:
    - tempdir is defined
    - packages_list is defined

- name: "Copy backup to HOME folder"
  copy:
    src: "{{ tempdir.path }}/{{ backup_name }}.img"
    dest: "{{ backup_final_destination | regex_replace('~', ansible_env.HOME) }}/{{ backup_name }}.img"
    remote_src: yes
  when: tempdir is defined
