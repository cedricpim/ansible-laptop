{{ ansible_managed | comment(decoration='" ') }}

" File:        {{ neovim_directory }}/nvim/init.vim
" Description: Neovim configuration file

call plug#begin('~/.local/share/nvim/plugged')

Plug 'junegunn/fzf', { 'dir': '~/.config/fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim' " FZF finder Ctrl+P
Plug 'jeetsukumaran/vim-buffergator' " List buffers
Plug 'neomake/neomake' " Linter
Plug 'kassio/neoterm' " Better terminal
Plug 'janko-m/vim-test' " Better tests
Plug 'tpope/vim-fugitive' " Git on nvim
Plug 'airblade/vim-gitgutter' " Git diff on files
Plug 'tpope/vim-surround' " Change enclosing symbols
Plug 'tpope/vim-commentary' " Comment out
Plug 'scrooloose/nerdtree' " Add tree to the left side
Plug 'jistr/vim-nerdtree-tabs' " Better nerdtree with tabs
Plug 'vim-airline/vim-airline' " Add airline to vim
Plug 'vim-airline/vim-airline-themes' " Better airline themes
Plug 'szw/vim-maximizer' " Maximize window
Plug 'majutsushi/tagbar' " Ctags
Plug 'terryma/vim-multiple-cursors' " Multiple cursors
Plug 'chaoren/vim-wordmotion' " Better word moving
Plug 'tpope/vim-rails' " Rails helpers
Plug 'vim-ruby/vim-ruby' " Configurations for ruby
Plug 'iamcco/markdown-preview.vim' " Add markdown viewer
Plug 'jremmen/vim-ripgrep' " Ripgrep on nvim
Plug 'bogado/file-line' " Open file on a given line
Plug 'tpope/vim-abolish' " Renaming strings
Plug 'flazz/vim-colorschemes' " Moar colorschemes
Plug 'tpope/vim-dispatch' " Add dispatch to vim
Plug 'radenling/vim-dispatch-neovim' " Place dispatch as the main handler on neovim
Plug 'tpope/vim-endwise' " Automate adding end
Plug 'sheerun/vim-polyglot' " Add syntax
Plug 'ryanoasis/vim-devicons' " Add icons to vim
Plug 'tiagofumo/vim-nerdtree-syntax-highlight' " Add color to icons on nerdtree
Plug 'xolox/vim-misc' " Needed for vim-notes
Plug 'xolox/vim-notes' " Allow note taking
Plug 'tpope/vim-rhubarb' " Used by vim-fugitive :Gbrowser
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' } " Autocomplete
Plug 'fishbullet/deoplete-ruby' " Autocomplete for Ruby
Plug 'tpope/vim-obsession' " Continuously update session files
Plug 'dbeniamine/cheat.sh-vim' " Use cht.sh from within Vim

call plug#end()


"""""""""""
" General "
"""""""""""
set number " line number
set cursorline " highlight current line
set incsearch " do incremental searching
set autoindent
set smartindent
set expandtab " insert space characters whenever tab is pressed
set tabstop=2
set softtabstop=2
set shiftwidth=2
set laststatus=2
set autoread " set to auto read when a file is changed from the outside
set foldmethod=syntax
set nofoldenable " do not immediately fold when opening a file
set spell " set spell checker
set timeoutlen=1000 ttimeoutlen=0 " reduce delay with key presses (for ESC mostly)
set guicursor= " disable cursor styling

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  silent! colorscheme {{ neovim_colorscheme }}
  set background={{ neovim_background_color }}
endif

if has("unix")
  set clipboard=unnamed,unnamedplus " Clipboard to work with X
endif


"""""""""""""
" Functions "
"""""""""""""

function! GetVisual()
  let reg_save = getreg('"')
  let regtype_save = getregtype('"')
  let cb_save = &clipboard
  set clipboard&
  normal! ""gvy
  let selection = getreg('"')
  call setreg('"', reg_save, regtype_save)
  let &clipboard = cb_save
  return selection
endfunction

" Disable deoplete when using multiple cursors
function g:Multiple_cursors_before()
  let g:deoplete#disable_auto_complete = 1
endfunction

function g:Multiple_cursors_after()
  let g:deoplete#disable_auto_complete = 0
endfunction

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis | wincmd p | diffthis
endif

" Have a preview when searching for files
command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

" Use ripgrep
command! -bang -nargs=* RRg
  \ call fzf#vim#grep(
  \   'rg --hidden --column --sort-files --line-number --no-heading --color=always --smart-case -g "!.git" '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \ <bang>0)


""""""""""""""""""""
" General Mappings "
""""""""""""""""""""

" Set my leader to the comma key.
let g:mapleader=','
map <Space> <Leader>

" Map moving out of insert mode in terminal
:tnoremap <ESC> <C-\><C-n>

cmap w!! w !sudo tee > /dev/null %

nnoremap cc :cclose<CR>

" Disable arrow keys
nnoremap <up>    <nop>
nnoremap <down>  <nop>
nnoremap <left>  <nop>
nnoremap <right> <nop>
vnoremap <up>    <nop>
vnoremap <down>  <nop>
vnoremap <left>  <nop>
vnoremap <right> <nop>

" Regular cutting and pasting (without copying)
nnoremap <leader>d "_d
vnoremap <leader>d "_d
nnoremap <leader>p "_dP
vnoremap <leader>p "_dP

" On insert mode, Shift-Tab to unindent
inoremap <S-Tab> <C-D>
" On visual mode, use tab and shift tab to indent the current selected text
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv
nnoremap <C-t> :tabe<CR>
nnoremap <C-h> :tabp<CR>
nnoremap <C-l> :tabn<CR>
nnoremap <C-j> 19j<CR>
nnoremap <C-k> 21k<CR>
nnoremap <S-h> :10winc <CR>
nnoremap <S-l> :10winc <<CR>
nnoremap <Leader>\ :vsplit<CR>
nnoremap <Leader>- :split<CR>

" Yank full file path (also with current line)
nnoremap <Leader>fp :let @+=expand("%:p")<CR>
nnoremap <Leader>rp :let @+=expand("%")<CR>
nnoremap <Leader>lfp :let @+=expand("%:p") . ':' . line(".")<CR>
nnoremap <Leader>rfp :let @+=expand("%") . ':' . line(".")<CR>


""""""""""""""""""
" Configurations "
""""""""""""""""""

" Fzf configs
nnoremap <C-p> :Files<CR>
nnoremap <Leader>ss :RRg!<Space>
nnoremap <silent> <Leader>sk :<C-U>execute "RRg! " . expand('<cword>')<CR>
nnoremap <silent> <Leader>sd :<C-U>execute "RRg! def " . expand('<cword>')<CR>
vnoremap <Leader>sv :<C-U>execute "RRg! " . GetVisual()<CR>

" Neoterm configs
let g:neoterm_autoinsert = 1
let g:neoterm_default_mod = 'rightbelow'
nnoremap <silent> <Leader>tt :Ttoggle<CR>

" Nerdtree configs
let g:nerdtree_tabs_autofind=1
let g:nerdtree_tabs_open_on_gui_startup=0
map <C-b> <plug>NERDTreeMirrorToggle<CR>
map <C-f> :NERDTreeFind<CR>

" Test configs
let test#strategy = "neoterm"
nnoremap <Leader>tn :TestNearest<CR>
nnoremap <Leader>tf :TestFile<CR>
nnoremap <Leader>ts :TestSuite<CR>
nnoremap <Leader>tl :TestLast<CR>
nnoremap <Leader>tv :TestVisit<CR>

" Airline configs
let g:airline_powerline_fonts = 1
let g:airline_theme = 'papercolor'
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
" This is required since current system cannot display the default symbol
let g:airline_symbols.linenr = 'Â¶'

" Tagbar configs
let g:tagbar_autoclose = 1
let g:tagbar_type_ruby = {
  \ 'kinds' : [
    \ 'm:modules',
    \ 'c:classes',
    \ 'd:describes',
    \ 'C:contexts',
    \ 'f:methods',
    \ 'F:singleton methods'
  \ ]
\ }

" Rails (rails-vim)
" Projections to other folders
let g:rails_projections = {
  \ "apq/*.rb": {
    \ "test": [
      \ "test/apq/{}_test.rb",
      \ "spec/apq/{}_spec.rb"
    \ ]
  \ },
  \ "spec/apq/*_spec.rb": {
    \ "alternate": [
      \ "apq/{}.rb"
    \ ]
  \ }
\ }
nmap <F9> :TagbarToggle<CR>

" Markdown
let g:mkdp_path_to_chrome = "firefox"
nmap <silent> <Leader>m <Plug>MarkdownPreview<CR>     " for normal mode
imap <silent> <Leader>m <Plug>MarkdownPreview<CR>     " for insert mode
nmap <silent> <Leader>d <Plug>StopMarkdownPreview<CR> " for normal mode
imap <silent> <Leader>d <Plug>StopMarkdownPreview<CR> " for insert mode

" Define maximization settings
let g:maximizer_set_mapping_with_bang = 1
let g:maximizer_default_mapping_key = '<C-o>'

" Notes configs
let g:notes_suffix = '.md'
let g:notes_smart_quotes = 0
noremap <Leader>nn :tabedit note:
noremap <Leader>nd :DeleteNote<CR>
noremap <Leader>ns :SearchNote<space>
noremap <Leader>nl :RecentNotes<CR>
noremap <Leader>nt :ShowTaggedNotes<CR>

" Deoplete
let g:deoplete#enable_at_startup = 1

" Vim-fugitive configs
noremap <Leader>gd :Gdiff<CR>
noremap <Leader>gb :Gblame<CR>
noremap <Leader>gs :Gstatus<CR>
noremap <Leader>gc :Gcommit -S<CR>
noremap <Leader>gk :Gcommit -S %<CR>
noremap <Leader>gp :Gpush<CR>
noremap <Leader>gb :Gbrowse<CR>

" Ripgrep configs
" Use RipGrep for lightning fast Gsearch command
set grepprg=rg\ --vimgrep\ --no-heading\ --sort-files
set grepformat=%f:%l:%c:%m,%f:%l:%m
nmap <Leader>rg :Rg --hidden --sort-files -g '!.git' ""<Left>
nnoremap <silent> <Leader>ra :Rg --hidden --sort-files -g '!.git' <cword><CR>


"""""""""""
" Autocmd "
"""""""""""

autocmd! BufWritePost * Neomake
autocmd BufWritePre * :%s/\s\+$//e " Trim whitespaces
autocmd FileType crontab setlocal nobackup nowritebackup " Edit crontab files
autocmd FileType gitcommit setlocal spell textwidth=72 " Helps Git commit messages
autocmd BufRead,BufNewFile *.md setlocal textwidth=80 " Apply 80 characters limit to Markdown
autocmd VimLeave * call system("xsel -ib", getreg('+'))

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
" Also don't do it when the mark is in the first line, that is the default
" position when opening a file.
autocmd BufReadPost *
  \ if line("'\"") > 1 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif
